package basics.tobyspring0;


public class HelloSpringApplication {

	public static void main(String[] args) {
		System.out.println("hell world");
	}

}

// p.53
//스프링은 자바를 기반으로 한 기술이다.
//스프링이 자바에서 가장 가치를 크게 두는 점은 객체지향 언어라는 점이다.
//자바가 객체지향 언어라는 특징을 잘 살리면 엔터프라이즈 기술을 효율적으로 구현할 수 있다.
//그러나 EJB 와 같은 프레임워크와 온갖 잡기술 때문에 자바는 본연의 가치를 발휘하지 못하고 있다.
//스프링의 기본 철학은 자바의 객체지향 특징을 잘 살릴 수 있도록 기본으로 돌아가자는 것이다.
//그래서 스프링이 가장 크게 관심을 두는 대상은 오브젝트이다.
//애플리케이션 안에서 오브젝트가 생성되고 다른 오브젝트와 관계를 맺고 사용되고 소멸하는 전 과정을 이해해야 한다.
//그러다 보면 객체지향 설계의 기초와 원칙부터(SOLID) 디자인 패턴, 리팩토링, 테스트, 설계, 구현 등
//자연스럽게 관련된 기술과 지식이 쌓이게 된다.
//
//스프링 => 자바 => 오브젝트 => 생성/관계/사용/소멸... => 설계/구현/테스트/디자인 패턴....

// p.59
//"스프링을 공부한다는 건 바로 이런 문제 제기와 의문에 대한 답을 찾아나가는 과정이다."
//스프링은 어떤 천재가 혼자 뚝딱 만든 완성품이 아니다.
//여러 자바 진영 개발자들이 커뮤니티에 모여서 집단 지성으로 만든 프레임워크다.
//"이런 불편함이 가장 큰데 이걸 어떻게 해결하면 좋을까요?"
//"이런 식으로 설계하면 해결되지 않을까요?"
//"정말 좋은 방법이네요! 아 근데 쓰다 보니 이런 부작용이 있는데 어떡하죠?"
//"저는 지나가던 다른 사람인데 그건 이런 방식으로 예방할 수 있을 것 같아요"
//"아 해결됐습니다! 그런데 하다 보니 이런 방법도 생각났는데 어떤가요?"
//"..."
//이렇게 문제에 부딪히고, 그 문제를 해결하기 위해서 고민하고,
//그렇게 나온 해결책에서 다시 발전시키고...
//그런 과정을 통해서 최종적으로 가장 나은 사례라고 판단한 기술들을 묶어 놓은 게 스프링 프레임워크
//그러니까 스프링의 기술만 공부한다면 우리는 문제 풀이 없이 정답만 외우는 꼴이지
//처음에 어떤 문제가 있었는지, 그걸 해결하기 위해 혼자서 고민해 보고
//이런 저런 기술 적용해가면서 풀어 보고, 그런 과정에서 실력이 쌓이는 것.
//즉, 스프링을 공부한다는 건 이렇게 '질문'을 공부하는 것.
//어떤 질문들이 있었는지, 어떤 풀이 과정이 좋을지 스스로 공부해 보는 것.
//그리고 내가 내놓은 정답이랑 스프링이 내놓은 정답이랑 비교해보는 것.
//그래야 실력이 늘지. 그래야 스프링을 공부하는 것.